<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <context:annotation-config/>
<!--     <mvc:annotation-driven /> -->
    <mvc:default-servlet-handler />
    <aop:aspectj-autoproxy />
    <!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器 -->
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <!--添加扫描的包--><!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
    <context:component-scan base-package="com.yodata.creditsupport"/>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1"/>
	</bean>
     <!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/> 
    <!-- 增加一个注解，防止用户重复提交 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
        <property name="interceptors">
            <list>
                <bean class="com.yodata.core.annotation.AvoidDuplicateSubmissionInterceptor"/>
            </list>
        </property>
    </bean>
    
    <context:property-placeholder location="classpath*:db.properties, classpath*:config.properties"/>
    <!-- 注入properties值的常量类 -->
    <bean id="constant" class="com.yodata.creditsupport.util.ConstantBean" />
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user.name}" />
        <property name="password" value="${jdbc.user.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="useUnfairLock" value="true" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <property name="connectionProperties" value="config.file=classpath:onelikeyouConfig.properties;druid.stat.slowSqlMillis=5000" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
    </bean>
    <!-- 抓取数据库, 二期中不使用，注释开始 -->
    <!-- 
    <bean id="crawlerDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.crawler.url}" />
        <property name="username" value="${jdbc.crawler.user.name}" />
        <property name="password" value="${jdbc.crawler.user.password}" />
        <property name="initialSize" value="5" />
        <property name="maxActive" value="10" />
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="crawlerDataSource" />
    </bean>
    <bean id="newsListDao" class="com.yodata.creditsupport.dao.crawler.NewsListDao">
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>
    -->
    <!-- 抓取数据库, 二期中不使用，注释结束 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <!-- 可以加多个包 -->
                <value>com.yodata.creditsupport</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>
    </bean>
    
    <!-- 配置加载所有的外部sql文件 -->
    <bean id="dynamicStatementBuilder" class="com.yodata.creditsupport.dao.hibernate.impl.DynamicHibernateStatementBuilderImpl">  
        <property name="fileNames">
            <!--这里我们指定要加载某个文件夹下所有以-dynamic.xml结尾的文件 -->  
            <list>  
                <value>classpath*:/**/*-sql.xml</value>  
            </list>  
        </property>  
    </bean>
    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />
	<!-- 使用ContentNegotiationManager决定media type策略 -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
<!-- 		<property name="defaultContentType" value="application/json" /> -->
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="false" />
		<property name="mediaTypes">  
            <map>  
                <entry key="json" value="application/json"/>
				<entry key="html" value="text/html"/>
<!-- 				<entry key="xml" value="application/xml"/> -->
             </map>
        </property>
	</bean>
	<mvc:annotation-driven>
	    <mvc:message-converters>
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	            <property name="objectMapper">
	                <bean class="com.fasterxml.jackson.databind.ObjectMapper">
	                    <property name="dateFormat">
	                        <bean class="java.text.SimpleDateFormat">
	                            <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
	                        </bean>
	                    </property>
	                </bean>
	            </property>
	        </bean>
	    </mvc:message-converters>
	</mvc:annotation-driven>
</beans>